# -*- coding: utf-8 -*-
"""data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11GvxsdYg3q12y7IOEoH_57UnCg-cwxyY
"""

!pip install  Tensorflow

!pip install Tensorflow_decision_forests

!pip install pandas

!pip install  Numpy

!pip install seaborn

!pip install  Matplotlib





import tensorflow as tf
import tensorflow_decision_forests as tfdf
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

!install --upgrade pandas

df = pd.read_csv('/content/train (4).csv')

print(df)

f5r = df.head()

f5r

print(df['Cabin'].head(10))

print(df['Transported'].head(30))

df.describe()

df.info()

doc_path = '/content/train (4).csv'
data = pd.read_csv(doc_path)

true_count = data['Transported'].value_counts()[True]
false_count = data['Transported'].value_counts()[False]

print("True say覺s覺:", true_count)
print("False say覺s覺:", false_count)

# Create a bar chart
plt.bar(['True', 'False'], [true_count, false_count])
plt.yticks([0,1500, 3000,4500, 6000,7500, 8700])
plt.ylabel('Number of Passengers')
plt.xlabel("Passengers that able/unable to get their station")
plt.title('Passenger Station Arrival Status')
plt.show()

doc_path = '/content/train (4).csv'
d = pd.read_csv(doc_path)

sns.histplot(data=d,x='Age')

data.head()

plt.hist(d['RoomService'], label='RoomService')
plt.xlabel('RoomService')
plt.ylabel('Number of people')
plt.xticks([0,1000, 2000, 4000,6000])
plt.show()

plt.hist(d['VRDeck'], label='VRDeck')
plt.xlabel('VRDeck')
plt.ylabel('Number of decks')
plt.show()

df

plt.hist(d['FoodCourt'], label='FoodCourt')
plt.xlabel('FoodCourt')
plt.ylabel('Number of people')
plt.show()

plt.hist(d['ShoppingMall'], label='ShoppingMall')
plt.xlabel('ShoppingMall')
plt.ylabel('Number of people')
plt.show()

plt.hist(d['Spa'], label='Spa')
plt.xlabel('Spa')
plt.ylabel('Number of people')
plt.show()

print("Before dropping columns:")
print(df.head())

columns_to_drop = ['Name', 'PassengerId']
df = df.drop(columns=columns_to_drop, axis=1)

(df.isnull().sum().sort_values(ascending=False))

df.Transported = df.Transported.replace({True: 1, False: 0})
df.CryoSleep = df.CryoSleep.replace({True: 1, False: 0})
df.VIP = df.VIP.replace({True: 1, False: 0})

values = {"Transported": 0}
df.fillna(value=values)

values_for_num = {"Age":0,"RoomService":0,"FoodCourt":0,
                  "ShoppingMall":0,"Spa":0,"VRDeck":0}
df.fillna(value=values_for_num)

df[['Deck', 'Cabin_num', 'side']] = df['Cabin'].str.split('/', expand = True)
print(df)

df

columns_to_drop = ['Cabin']
df = df.drop(columns=columns_to_drop, axis=1)

df

def split_dataset(dataset,test_ratio =0.20):
  test_indices = np.random.rand(len(dataset)) < test_ratio
  return dataset[~test_indices], dataset[test_indices]

dataset = pd.DataFrame(df)
training , test = split_dataset(dataset)

test

training

train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(training, label="Transported")
test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test, label="Transported")

missing_values = df.isnull()
print(missing_values)

tfdf.keras.get_all_models()

model = tfdf.keras.RandomForestModel()
model.fit(train_ds)

model.evaluate(test_ds)

model.compile(metrics=["accuracy"])

model.fit(train_ds)

eval = model.evaluate(test_ds)

tfdf.model_plotter.plot_model_in_colab(model, tree_idx=0,
max_depth=3)

logs =model.make_inspector().training_logs()
plt.plot([log.num_trees for log in logs],[log.evaluation.accuracy for log in logs])

df.columns

inspector =model.make_inspector()
inspector.evaluation()

evaluation = model.evaluate(x=train_ds, return_dict = True)

for name, value in evaluation.items():
  print(f"{name}:{value:.4f}")

inspector.variable_importances()["NUM_AS_ROOT"]

x = np.linspace(0, 2)

y = np.sin(3 * x)
plt.plot(x, y)

plt.plot(d["Cabin_num"])

plt.plot(d['VRDeck'], label='Cabin_num')
plt.xlabel('Cabin_num')
plt.ylabel('Number of people')
plt.xticks([0,1000, 2000, 4000,6000])
plt.show()

print(d)